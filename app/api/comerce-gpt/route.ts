import { openai } from "@/lib/openai";
import { Message } from "ai";
import { streamText } from "ai";
import { z } from "zod";
import { IProduct } from "@/types/product";
import { getAllProducts } from "@/services/product";

export const maxDuration = 30;

const prompt: Omit<Message, "id">[] = [
    {
        role: "system",
        content:
            `
        B·∫°n l√† m·ªôt nh√¢n vi√™n t∆∞ v·∫•n chƒÉm s√≥c da chuy√™n nghi·ªáp.
        Khi ng∆∞·ªùi d√πng m·ªü chatbox, b·∫°n s·∫Ω ch·ªß ƒë·ªông ch√†o h·ªèi v√† gi·ªõi thi·ªáu v·ªÅ d·ªãch v·ª• t∆∞ v·∫•n da c·ªßa b·∫°n.
        Sau ƒë√≥, b·∫°n s·∫Ω gi√∫p kh√°ch h√†ng x√°c ƒë·ªãnh ƒë∆∞·ª£c lo·∫°i da c·ªßa h·ªç b·∫±ng c√°ch ƒë·∫∑t t·ª´ng c√¢u h·ªèi m·ªôt ƒë·ªÉ h·ªç tr·∫£ l·ªùi.
        H√£y nh·ªõ l√† ƒë·∫∑t t·ª´ng c√¢u m·ªôt th√¥i kh√¥ng ƒë∆∞·ª£c h·ªèi 1 l·∫ßn nhi·ªÅu c√¢u.
        
        Khi ƒë√£ ƒë·ªß th√¥ng tin v·ªÅ lo·∫°i da v√† d·ªã ·ª©ng, b·∫°n ph·∫£i tr·∫£ l·ªùi ngay s·∫£n ph·∫©m ph√π h·ª£p cho kh√°ch h√†ng, kh√¥ng h·ªèi th√™m n·ªØa.
        Khi t√¨m ki·∫øm s·∫£n ph·∫©m, h√£y t√¨m ki·∫øm s·∫£n ph·∫©m ph√π h·ª£p v·ªõi lo·∫°i da c·ªßa kh√°ch h√†ng.
        N·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p th√¨ b√°o cho kh√°ch h√†ng bi·∫øt r·∫±ng hi·ªán t·∫°i kh√¥ng c√≥ s·∫£n ph·∫©m ph√π h·ª£p v·ªõi lo·∫°i da c·ªßa kh√°ch h√†ng.

        Khi g·ªçi tool "productSearch", b·∫°n s·∫Ω nh·∫≠n v·ªÅ m·ªôt object JSON nh∆∞ sau:

        {
         "type": "product-list",
         "products": [...],
         "message": "...",         n·∫øu c√≥
         "status": "out-of-stock"  ho·∫∑c "error"
        }

         ==> N·∫øu c√≥ m·∫£ng "products" v√† ƒë·ªô d√†i > 0:
         - B·∫°n ph·∫£i m√¥ t·∫£ ngay 2‚Äì3 s·∫£n ph·∫©m m·ªôt c√°ch th√¢n thi·ªán, kh√¥ng c·∫ßn h·ªèi l·∫°i kh√°ch h√†ng n·ªØa.

         ==> N·∫øu status l√† "out-of-stock":
         - H√£y b√°o r·∫±ng hi·ªán t·∫°i s·∫£n ph·∫©m ph√π h·ª£p ƒë√£ h·∫øt h√†ng, v√† h·ªèi kh√°ch c√≥ mu·ªën ƒë∆∞·ª£c th√¥ng b√°o khi c√≥ h√†ng m·ªõi kh√¥ng.

         ==> N·∫øu status l√† "error":
         - B√°o l·ªói l·ªãch s·ª± v√† m·ªùi kh√°ch th·ª≠ l·∫°i sau.

        N·∫øu ng∆∞·ªùi d√πng h·ªèi c√¢u h·ªèi kh√¥ng li√™n quan h√£y n√≥i v·ªõi h·ªç r·∫±ng b·∫°n ch·ªâ t∆∞ v·∫•n v·ªÅ da.
        `

    }
];

export async function OPTIONS() {
    return new Response(null, {
        status: 200,
        headers: {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type, Authorization',
        },
    });
}

export async function POST(req: Request) {
    if (req.method === 'OPTIONS') {
        return new Response(null, {
            status: 200,
            headers: {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, Authorization',
            },
        });
    }

    try {
        const json = await req.json();
        const messages: Omit<Message, "id">[] = json.messages;
        const products = await getAllProducts();

        const firstCall = await streamText({
            model: openai("gpt-4o"),
            messages: prompt.concat(messages),
            experimental_activeTools: ["productSearch"],
            tools: {
                productSearch: {
                    description: `
                    Ti·∫øp theo h√£y h·ªèi kh√°ch h√†ng c√≥ b·ªã d·ªã ·ª©ng v·ªõi th√†nh ph·∫ßn n√†o kh√¥ng?
                    N·∫øu kh√°ch h√†ng kh√¥ng bi·∫øt h√£y t∆∞ v·∫•n ƒë·ªÉ gi√∫p h·ªç x√°c ƒë·ªãnh c√≥ b·ªã d·ªã ·ª©ng v·ªõi th√†nh ph·∫ßn n√†o kh√¥ng.
                    N·∫øu kh√°ch h√†ng kh√¥ng b·ªã d·ªã ·ª©ng th√¨ h√£y t√¨m ki·∫øm s·∫£n ph·∫©m ph√π h·ª£p theo t√™n ho·∫∑c lo·∫°i da,... ph√π h·ª£p v·ªõi kh√°ch h√†ng ƒë√£ t∆∞ v·∫•n.
                    N·∫øu kh√°ch h√†ng c√≥ b·ªã d·ªã ·ª©ng th√¨ h√£y lo·∫°i b·ªè c√°c s·∫£n ph·∫©m c√≥ ch·ª©a th√†nh ph·∫ßn b·ªã d·ªã ·ª©ng trong m·∫£ng ingredients c·ªßa s·∫£n ph·∫©m th√¨ lo·∫°i b·ªè s·∫£n ph·∫©m ƒë√≥ kh·ªèi danh s√°ch c√°c s·∫£n ph·∫©m t√¨m ki·∫øm ƒë∆∞·ª£c ph√π h·ª£p v·ªõi kh√°ch h√†ng ·ªü tr√™n.
                    `,
                    parameters: z.object({
                        skinConcerns: z.enum([
                            "sensitive",
                            "dry",
                            "normal",
                            "combination",
                            "oily",
                        ]),
                    }),
                    execute: async ({ skinConcerns }) => {
                        console.log("üß™ [productSearch] Called with skinConcerns:", skinConcerns);
                        console.log("Products from store:", products);

                        try {
                            const matched = products.data.filter((product: IProduct) =>
                                product.skinConcerns?.includes(skinConcerns)
                            );

                            console.log("üîç [productSearch] Matched products:", matched.length);

                            if (matched.length === 0) {
                                return {
                                    role: "assistant" as const,
                                    content: "Hi·ªán t·∫°i c√°c s·∫£n ph·∫©m ph√π h·ª£p v·ªõi lo·∫°i da n√†y ƒë√£ h·∫øt h√†ng.",
                                    description: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p v·ªõi lo·∫°i da",
                                };
                            }

                            return {
                                role: "assistant",
                                content: JSON.stringify({
                                    type: "product-list",
                                    products: matched.slice(0, 3),
                                    message: `D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë s·∫£n ph·∫©m ph√π h·ª£p v·ªõi l√†n da c·ªßa b·∫°n:`
                                }),
                            };
                        } catch (err) {
                            console.error("‚ùå [productSearch] Error:", err);
                            return {
                                role: "assistant" as const,
                                content: "ƒê√£ x·∫£y ra l·ªói khi t√¨m s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i sau.",
                            };
                        }
                    }
                },
            },
        });

        const response = firstCall.toDataStreamResponse();
        console.log(response);
        
        const headers = new Headers(response.headers);
        headers.set('Access-Control-Allow-Origin', '*');
        headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
        headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');

        const reader = response.body?.getReader();
        if (!reader) {
            return new Response(JSON.stringify({
                success: false,
                message: 'No response body from GPT',
                timestamp: new Date().toISOString()
            }), {
                status: 500,
                headers: {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
                    'Access-Control-Allow-Headers': 'Content-Type, Authorization',
                },
            });
        }
        let result = '';
        while (true) {
            const { done, value } = await reader.read();
            if (done) break;
            result += new TextDecoder().decode(value);
        }

        // Log ra n·ªôi dung th·ª±c t·∫ø s·∫Ω tr·∫£ v·ªÅ client
        console.log('RESPONSE TO CLIENT:', result);

        // result l√† to√†n b·ªô chu·ªói stream
        const lines = result.split('\n');
        let text = '';
        let productJson: Record<string, unknown> | null = null;

        for (const line of lines) {
            // L·∫•y c√°c d√≤ng chat th∆∞·ªùng
            const match = line.match(/^0:\"(.*)\"$/);
            if (match) {
                text += match[1];
            }
            // L·∫•y d√≤ng tr·∫£ v·ªÅ s·∫£n ph·∫©m (d·∫°ng JSON trong d√≤ng b·∫Øt ƒë·∫ßu b·∫±ng a:)
            if (line.startsWith('a:')) {
                try {
                    const obj = JSON.parse(line.slice(2));
                    if (obj.result && obj.result.content) {
                        // content l√† chu·ªói JSON, c·∫ßn parse ti·∫øp
                        productJson = JSON.parse(obj.result.content);
                    }
                } catch {}
            }
        }

        if (productJson) {
            // Tr·∫£ v·ªÅ raw stream (nguy√™n chu·ªói result)
            return new Response(result, {
                status: 200,
                headers: {
                    'Content-Type': 'text/plain; charset=utf-8',
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
                    'Access-Control-Allow-Headers': 'Content-Type, Authorization',
                },
            });
        } else {
            // Tr·∫£ v·ªÅ JSON message nh∆∞ c≈©
            return new Response(JSON.stringify({
                success: true,
                message: text,
                timestamp: new Date().toISOString()
            }), {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
                    'Access-Control-Allow-Headers': 'Content-Type, Authorization',
                },
            });
        }
    } catch (error) {
        console.error("GPT ToolInvocation l·ªói:", error);
        const encoder = new TextEncoder();
        const body = encoder.encode(
            `data: ${JSON.stringify({
                id: Date.now(),
                role: "assistant",
                content:
                    "Xin l·ªói, hi·ªán t·∫°i h·ªá th·ªëng ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. B·∫°n vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t nh√©!",
            })}\n\n`
        );

        return new Response(body, {
            headers: {
                "Content-Type": "text/event-stream",
                "Cache-Control": "no-cache",
                Connection: "keep-alive",
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
                "Access-Control-Allow-Headers": "Content-Type, Authorization",
            },
        });
    }
}